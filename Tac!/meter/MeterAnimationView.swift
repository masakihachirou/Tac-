//
// MeterAnimationView.swift
// Generated by Core Animator version 1.2 on 9/17/15.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

@IBDesignable
class MeterAnimationView : UIView {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 863, height: 237))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .ScaleToFill:
				break
			case .ScaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
			scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = NSBundle(forClass:self.dynamicType)
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:863, height:237)
		__scaling__.center = CGPoint(x:431.9, y:118.5)
		__scaling__.layer.masksToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let greyDashes = UIImageView()
		greyDashes.bounds = CGRect(x:0, y:0, width:863.0, height:237.0)
		var imgTac42: UIImage!
		if let imagePath = bundle.pathForResource("Tac-42.png", ofType:nil) {
			imgTac42 = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Tac-42.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		greyDashes.image = imgTac42
		greyDashes.contentMode = .Center;
		greyDashes.layer.position = CGPoint(x:432.344, y:118.871)
		__scaling__.addSubview(greyDashes)
		viewsByName["grey-dashes"] = greyDashes

		let arc = UIImageView()
		arc.bounds = CGRect(x:0, y:0, width:863.0, height:237.0)
		arc.layer.anchorPoint = CGPoint(x:0.497, y:2.113)
		var imgTac44: UIImage!
		if let imagePath = bundle.pathForResource("Tac-44.png", ofType:nil) {
			imgTac44 = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Tac-44.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		arc.image = imgTac44
		arc.contentMode = .Center;
		arc.layer.position = CGPoint(x:428.914, y:498.238)
		__scaling__.addSubview(arc)
		viewsByName["arc"] = arc

		let base = UIImageView()
		base.bounds = CGRect(x:0, y:0, width:863.0, height:237.0)
		var imgTac39: UIImage!
		if let imagePath = bundle.pathForResource("Tac-39.png", ofType:nil) {
			imgTac39 = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Tac-39.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		base.image = imgTac39
		base.contentMode = .Center;
		base.layer.position = CGPoint(x:432.344, y:118.871)
		__scaling__.addSubview(base)
		viewsByName["base"] = base

		let colorDashes = UIImageView()
		colorDashes.bounds = CGRect(x:0, y:0, width:863.0, height:237.0)
		var imgTac41: UIImage!
		if let imagePath = bundle.pathForResource("Tac-41.png", ofType:nil) {
			imgTac41 = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Tac-41.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		colorDashes.image = imgTac41
		colorDashes.contentMode = .Center;
		colorDashes.layer.position = CGPoint(x:432.344, y:118.871)
		__scaling__.addSubview(colorDashes)
		viewsByName["color-dashes"] = colorDashes

		let shadow = UIImageView()
		shadow.bounds = CGRect(x:0, y:0, width:150.0, height:225.0)
		shadow.layer.anchorPoint = CGPoint(x:0.610, y:1.761)
		var imgTac46: UIImage!
		if let imagePath = bundle.pathForResource("Tac-46.png", ofType:nil) {
			imgTac46 = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Tac-46.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		shadow.image = imgTac46
		shadow.contentMode = .Center;
		shadow.layer.position = CGPoint(x:447.773, y:505.367)
		__scaling__.addSubview(shadow)
		viewsByName["shadow"] = shadow

		let needle = UIImageView()
		needle.bounds = CGRect(x:0, y:0, width:150.0, height:225.0)
		needle.layer.anchorPoint = CGPoint(x:0.487, y:1.830)
		var imgTac45: UIImage!
		if let imagePath = bundle.pathForResource("Tac-45.png", ofType:nil) {
			imgTac45 = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Tac-45.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		needle.image = imgTac45
		needle.contentMode = .Center;
		needle.layer.position = CGPoint(x:433.430, y:497.262)
		__scaling__.addSubview(needle)
		viewsByName["needle"] = needle

		self.viewsByName = viewsByName
	}

	// - MARK: dash1

	func addDash1Animation() {
		addDash1AnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addDash1Animation(completion: ((Bool) -> Void)?) {
		addDash1AnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addDash1Animation(removedOnCompletion removedOnCompletion: Bool) {
		addDash1AnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addDash1Animation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addDash1AnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addDash1AnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.750
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Dash1")
			self.animationCompletions[layer.animationForKey("Dash1")!] = complete
		}

		let needleRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		needleRotationAnimation.duration = 0.750
		needleRotationAnimation.values = [-0.772 as Float, -0.495 as Float]
		needleRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		needleRotationAnimation.timingFunctions = [easeOutTiming]
		needleRotationAnimation.beginTime = beginTime
		needleRotationAnimation.fillMode = fillMode
		needleRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleRotationAnimation, forKey:"dash1_Rotation")

		let needleTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		needleTranslationXAnimation.duration = 0.750
		needleTranslationXAnimation.values = [-28.000 as Float, -19.312 as Float]
		needleTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		needleTranslationXAnimation.timingFunctions = [easeOutTiming]
		needleTranslationXAnimation.beginTime = beginTime
		needleTranslationXAnimation.fillMode = fillMode
		needleTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleTranslationXAnimation, forKey:"dash1_TranslationX")

		let needleTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		needleTranslationYAnimation.duration = 0.750
		needleTranslationYAnimation.values = [-21.000 as Float, -9.984 as Float]
		needleTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		needleTranslationYAnimation.timingFunctions = [easeOutTiming]
		needleTranslationYAnimation.beginTime = beginTime
		needleTranslationYAnimation.fillMode = fillMode
		needleTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleTranslationYAnimation, forKey:"dash1_TranslationY")

		let shadowRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		shadowRotationAnimation.duration = 0.750
		shadowRotationAnimation.values = [-0.571 as Float, -0.386 as Float]
		shadowRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		shadowRotationAnimation.timingFunctions = [easeOutTiming]
		shadowRotationAnimation.beginTime = beginTime
		shadowRotationAnimation.fillMode = fillMode
		shadowRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowRotationAnimation, forKey:"dash1_Rotation")

		let shadowTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		shadowTranslationXAnimation.duration = 0.750
		shadowTranslationXAnimation.values = [-88.070 as Float, -53.000 as Float]
		shadowTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		shadowTranslationXAnimation.timingFunctions = [easeOutTiming]
		shadowTranslationXAnimation.beginTime = beginTime
		shadowTranslationXAnimation.fillMode = fillMode
		shadowTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowTranslationXAnimation, forKey:"dash1_TranslationX")

		let shadowTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		shadowTranslationYAnimation.duration = 0.750
		shadowTranslationYAnimation.values = [12.562 as Float, -1.008 as Float]
		shadowTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		shadowTranslationYAnimation.timingFunctions = [easeOutTiming]
		shadowTranslationYAnimation.beginTime = beginTime
		shadowTranslationYAnimation.fillMode = fillMode
		shadowTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowTranslationYAnimation, forKey:"dash1_TranslationY")

		let arcRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		arcRotationAnimation.duration = 0.750
		arcRotationAnimation.values = [-1.588 as Float, -1.292 as Float]
		arcRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		arcRotationAnimation.timingFunctions = [easeOutTiming]
		arcRotationAnimation.beginTime = beginTime
		arcRotationAnimation.fillMode = fillMode
		arcRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["arc"]?.layer.addAnimation(arcRotationAnimation, forKey:"dash1_Rotation")
	}

	func removeDash1Animation() {
		self.layer.removeAnimationForKey("Dash1")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("dash1_Rotation")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("dash1_TranslationX")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("dash1_TranslationY")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("dash1_Rotation")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("dash1_TranslationX")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("dash1_TranslationY")
		self.viewsByName["arc"]?.layer.removeAnimationForKey("dash1_Rotation")
	}

	// - MARK: dash2

	func addDash2Animation() {
		addDash2AnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addDash2Animation(completion: ((Bool) -> Void)?) {
		addDash2AnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addDash2Animation(removedOnCompletion removedOnCompletion: Bool) {
		addDash2AnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addDash2Animation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addDash2AnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addDash2AnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let easeOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.750
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Dash2")
			self.animationCompletions[layer.animationForKey("Dash2")!] = complete
		}

		let needleRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		needleRotationAnimation.duration = 0.750
		needleRotationAnimation.values = [-0.489 as Float, -0.262 as Float]
		needleRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		needleRotationAnimation.timingFunctions = [easeOutTiming]
		needleRotationAnimation.beginTime = beginTime
		needleRotationAnimation.fillMode = fillMode
		needleRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleRotationAnimation, forKey:"dash2_Rotation")

		let needleTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		needleTranslationXAnimation.duration = 0.750
		needleTranslationXAnimation.values = [-19.000 as Float, -1.000 as Float]
		needleTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		needleTranslationXAnimation.timingFunctions = [easeOutTiming]
		needleTranslationXAnimation.beginTime = beginTime
		needleTranslationXAnimation.fillMode = fillMode
		needleTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleTranslationXAnimation, forKey:"dash2_TranslationX")

		let needleTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		needleTranslationYAnimation.duration = 0.750
		needleTranslationYAnimation.values = [-9.000 as Float, 1.000 as Float]
		needleTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		needleTranslationYAnimation.timingFunctions = [easeOutTiming]
		needleTranslationYAnimation.beginTime = beginTime
		needleTranslationYAnimation.fillMode = fillMode
		needleTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleTranslationYAnimation, forKey:"dash2_TranslationY")

		let shadowRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		shadowRotationAnimation.duration = 0.750
		shadowRotationAnimation.values = [-0.384 as Float, -0.175 as Float]
		shadowRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		shadowRotationAnimation.timingFunctions = [easeOutTiming]
		shadowRotationAnimation.beginTime = beginTime
		shadowRotationAnimation.fillMode = fillMode
		shadowRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowRotationAnimation, forKey:"dash2_Rotation")

		let shadowTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		shadowTranslationXAnimation.duration = 0.750
		shadowTranslationXAnimation.values = [-53.000 as Float, -31.000 as Float]
		shadowTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		shadowTranslationXAnimation.timingFunctions = [easeOutTiming]
		shadowTranslationXAnimation.beginTime = beginTime
		shadowTranslationXAnimation.fillMode = fillMode
		shadowTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowTranslationXAnimation, forKey:"dash2_TranslationX")

		let shadowTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		shadowTranslationYAnimation.duration = 0.750
		shadowTranslationYAnimation.values = [-1.000 as Float, 0.000 as Float]
		shadowTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		shadowTranslationYAnimation.timingFunctions = [linearTiming]
		shadowTranslationYAnimation.beginTime = beginTime
		shadowTranslationYAnimation.fillMode = fillMode
		shadowTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowTranslationYAnimation, forKey:"dash2_TranslationY")

		let arcRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		arcRotationAnimation.duration = 0.750
		arcRotationAnimation.values = [-1.292 as Float, -1.030 as Float]
		arcRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		arcRotationAnimation.timingFunctions = [easeOutTiming]
		arcRotationAnimation.beginTime = beginTime
		arcRotationAnimation.fillMode = fillMode
		arcRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["arc"]?.layer.addAnimation(arcRotationAnimation, forKey:"dash2_Rotation")
	}

	func removeDash2Animation() {
		self.layer.removeAnimationForKey("Dash2")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("dash2_Rotation")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("dash2_TranslationX")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("dash2_TranslationY")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("dash2_Rotation")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("dash2_TranslationX")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("dash2_TranslationY")
		self.viewsByName["arc"]?.layer.removeAnimationForKey("dash2_Rotation")
	}

	// - MARK: dash3

	func addDash3Animation() {
		addDash3AnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addDash3Animation(completion: ((Bool) -> Void)?) {
		addDash3AnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addDash3Animation(removedOnCompletion removedOnCompletion: Bool) {
		addDash3AnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addDash3Animation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addDash3AnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addDash3AnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let easeOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.750
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Dash3")
			self.animationCompletions[layer.animationForKey("Dash3")!] = complete
		}

		let needleRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		needleRotationAnimation.duration = 0.750
		needleRotationAnimation.values = [-0.262 as Float, 0.000 as Float]
		needleRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		needleRotationAnimation.timingFunctions = [easeOutTiming]
		needleRotationAnimation.beginTime = beginTime
		needleRotationAnimation.fillMode = fillMode
		needleRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleRotationAnimation, forKey:"dash3_Rotation")

		let needleTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		needleTranslationXAnimation.duration = 0.750
		needleTranslationXAnimation.values = [-1.000 as Float, 2.000 as Float]
		needleTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		needleTranslationXAnimation.timingFunctions = [easeOutTiming]
		needleTranslationXAnimation.beginTime = beginTime
		needleTranslationXAnimation.fillMode = fillMode
		needleTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleTranslationXAnimation, forKey:"dash3_TranslationX")

		let needleTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		needleTranslationYAnimation.duration = 0.750
		needleTranslationYAnimation.values = [1.000 as Float, 4.000 as Float]
		needleTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		needleTranslationYAnimation.timingFunctions = [easeOutTiming]
		needleTranslationYAnimation.beginTime = beginTime
		needleTranslationYAnimation.fillMode = fillMode
		needleTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleTranslationYAnimation, forKey:"dash3_TranslationY")

		let shadowRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		shadowRotationAnimation.duration = 0.750
		shadowRotationAnimation.values = [-0.175 as Float, 0.000 as Float, 0.000 as Float]
		shadowRotationAnimation.keyTimes = [0.000 as Float, 0.933 as Float, 1.000 as Float]
		shadowRotationAnimation.timingFunctions = [easeOutTiming, linearTiming]
		shadowRotationAnimation.beginTime = beginTime
		shadowRotationAnimation.fillMode = fillMode
		shadowRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowRotationAnimation, forKey:"dash3_Rotation")

		let shadowTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		shadowTranslationXAnimation.duration = 0.750
		shadowTranslationXAnimation.values = [-31.000 as Float, 9.000 as Float, 9.000 as Float]
		shadowTranslationXAnimation.keyTimes = [0.000 as Float, 0.933 as Float, 1.000 as Float]
		shadowTranslationXAnimation.timingFunctions = [linearTiming, linearTiming]
		shadowTranslationXAnimation.beginTime = beginTime
		shadowTranslationXAnimation.fillMode = fillMode
		shadowTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowTranslationXAnimation, forKey:"dash3_TranslationX")

		let arcRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		arcRotationAnimation.duration = 0.750
		arcRotationAnimation.values = [-1.030 as Float, -0.768 as Float]
		arcRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		arcRotationAnimation.timingFunctions = [easeOutTiming]
		arcRotationAnimation.beginTime = beginTime
		arcRotationAnimation.fillMode = fillMode
		arcRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["arc"]?.layer.addAnimation(arcRotationAnimation, forKey:"dash3_Rotation")

		let arcTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		arcTranslationXAnimation.duration = 0.750
		arcTranslationXAnimation.values = [0.000 as Float, -1.000 as Float]
		arcTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		arcTranslationXAnimation.timingFunctions = [linearTiming]
		arcTranslationXAnimation.beginTime = beginTime
		arcTranslationXAnimation.fillMode = fillMode
		arcTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["arc"]?.layer.addAnimation(arcTranslationXAnimation, forKey:"dash3_TranslationX")
	}

	func removeDash3Animation() {
		self.layer.removeAnimationForKey("Dash3")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("dash3_Rotation")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("dash3_TranslationX")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("dash3_TranslationY")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("dash3_Rotation")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("dash3_TranslationX")
		self.viewsByName["arc"]?.layer.removeAnimationForKey("dash3_Rotation")
		self.viewsByName["arc"]?.layer.removeAnimationForKey("dash3_TranslationX")
	}

	// - MARK: dash4

	func addDash4Animation() {
		addDash4AnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addDash4Animation(completion: ((Bool) -> Void)?) {
		addDash4AnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addDash4Animation(removedOnCompletion removedOnCompletion: Bool) {
		addDash4AnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addDash4Animation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addDash4AnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addDash4AnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let easeOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.750
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Dash4")
			self.animationCompletions[layer.animationForKey("Dash4")!] = complete
		}

		let needleRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		needleRotationAnimation.duration = 0.750
		needleRotationAnimation.values = [0.000 as Float, 0.279 as Float]
		needleRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		needleRotationAnimation.timingFunctions = [easeOutTiming]
		needleRotationAnimation.beginTime = beginTime
		needleRotationAnimation.fillMode = fillMode
		needleRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleRotationAnimation, forKey:"dash4_Rotation")

		let needleTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		needleTranslationXAnimation.duration = 0.750
		needleTranslationXAnimation.values = [2.000 as Float, 0.000 as Float]
		needleTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		needleTranslationXAnimation.timingFunctions = [easeOutTiming]
		needleTranslationXAnimation.beginTime = beginTime
		needleTranslationXAnimation.fillMode = fillMode
		needleTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleTranslationXAnimation, forKey:"dash4_TranslationX")

		let needleTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		needleTranslationYAnimation.duration = 0.750
		needleTranslationYAnimation.values = [4.000 as Float, -7.000 as Float]
		needleTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		needleTranslationYAnimation.timingFunctions = [easeOutTiming]
		needleTranslationYAnimation.beginTime = beginTime
		needleTranslationYAnimation.fillMode = fillMode
		needleTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleTranslationYAnimation, forKey:"dash4_TranslationY")

		let shadowRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		shadowRotationAnimation.duration = 0.750
		shadowRotationAnimation.values = [0.000 as Float, 0.209 as Float]
		shadowRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		shadowRotationAnimation.timingFunctions = [easeOutTiming]
		shadowRotationAnimation.beginTime = beginTime
		shadowRotationAnimation.fillMode = fillMode
		shadowRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowRotationAnimation, forKey:"dash4_Rotation")

		let shadowTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		shadowTranslationXAnimation.duration = 0.750
		shadowTranslationXAnimation.values = [9.000 as Float, 32.000 as Float]
		shadowTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		shadowTranslationXAnimation.timingFunctions = [easeOutTiming]
		shadowTranslationXAnimation.beginTime = beginTime
		shadowTranslationXAnimation.fillMode = fillMode
		shadowTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowTranslationXAnimation, forKey:"dash4_TranslationX")

		let shadowTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		shadowTranslationYAnimation.duration = 0.750
		shadowTranslationYAnimation.values = [0.000 as Float, 1.000 as Float]
		shadowTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		shadowTranslationYAnimation.timingFunctions = [linearTiming]
		shadowTranslationYAnimation.beginTime = beginTime
		shadowTranslationYAnimation.fillMode = fillMode
		shadowTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowTranslationYAnimation, forKey:"dash4_TranslationY")

		let arcRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		arcRotationAnimation.duration = 0.750
		arcRotationAnimation.values = [-0.768 as Float, -0.524 as Float]
		arcRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		arcRotationAnimation.timingFunctions = [easeOutTiming]
		arcRotationAnimation.beginTime = beginTime
		arcRotationAnimation.fillMode = fillMode
		arcRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["arc"]?.layer.addAnimation(arcRotationAnimation, forKey:"dash4_Rotation")

		let arcTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		arcTranslationXAnimation.duration = 0.750
		arcTranslationXAnimation.values = [-1.000 as Float, 4.000 as Float]
		arcTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		arcTranslationXAnimation.timingFunctions = [linearTiming]
		arcTranslationXAnimation.beginTime = beginTime
		arcTranslationXAnimation.fillMode = fillMode
		arcTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["arc"]?.layer.addAnimation(arcTranslationXAnimation, forKey:"dash4_TranslationX")

		let arcTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		arcTranslationYAnimation.duration = 0.750
		arcTranslationYAnimation.values = [0.000 as Float, 0.000 as Float]
		arcTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		arcTranslationYAnimation.timingFunctions = [linearTiming]
		arcTranslationYAnimation.beginTime = beginTime
		arcTranslationYAnimation.fillMode = fillMode
		arcTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["arc"]?.layer.addAnimation(arcTranslationYAnimation, forKey:"dash4_TranslationY")
	}

	func removeDash4Animation() {
		self.layer.removeAnimationForKey("Dash4")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("dash4_Rotation")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("dash4_TranslationX")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("dash4_TranslationY")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("dash4_Rotation")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("dash4_TranslationX")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("dash4_TranslationY")
		self.viewsByName["arc"]?.layer.removeAnimationForKey("dash4_Rotation")
		self.viewsByName["arc"]?.layer.removeAnimationForKey("dash4_TranslationX")
		self.viewsByName["arc"]?.layer.removeAnimationForKey("dash4_TranslationY")
	}

	// - MARK: dash5

	func addDash5Animation() {
		addDash5AnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addDash5Animation(completion: ((Bool) -> Void)?) {
		addDash5AnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addDash5Animation(removedOnCompletion removedOnCompletion: Bool) {
		addDash5AnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addDash5Animation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addDash5AnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addDash5AnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let easeOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.750
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Dash5")
			self.animationCompletions[layer.animationForKey("Dash5")!] = complete
		}

		let needleRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		needleRotationAnimation.duration = 0.750
		needleRotationAnimation.values = [0.279 as Float, 0.524 as Float]
		needleRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		needleRotationAnimation.timingFunctions = [easeOutTiming]
		needleRotationAnimation.beginTime = beginTime
		needleRotationAnimation.fillMode = fillMode
		needleRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleRotationAnimation, forKey:"dash5_Rotation")

		let needleTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		needleTranslationXAnimation.duration = 0.750
		needleTranslationXAnimation.values = [-3.000 as Float, 9.000 as Float]
		needleTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		needleTranslationXAnimation.timingFunctions = [easeOutTiming]
		needleTranslationXAnimation.beginTime = beginTime
		needleTranslationXAnimation.fillMode = fillMode
		needleTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleTranslationXAnimation, forKey:"dash5_TranslationX")

		let needleTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		needleTranslationYAnimation.duration = 0.750
		needleTranslationYAnimation.values = [1.000 as Float, -13.000 as Float]
		needleTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		needleTranslationYAnimation.timingFunctions = [easeOutTiming]
		needleTranslationYAnimation.beginTime = beginTime
		needleTranslationYAnimation.fillMode = fillMode
		needleTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleTranslationYAnimation, forKey:"dash5_TranslationY")

		let shadowRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		shadowRotationAnimation.duration = 0.750
		shadowRotationAnimation.values = [0.209 as Float, 0.436 as Float]
		shadowRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		shadowRotationAnimation.timingFunctions = [easeOutTiming]
		shadowRotationAnimation.beginTime = beginTime
		shadowRotationAnimation.fillMode = fillMode
		shadowRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowRotationAnimation, forKey:"dash5_Rotation")

		let shadowTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		shadowTranslationXAnimation.duration = 0.750
		shadowTranslationXAnimation.values = [29.000 as Float, 42.000 as Float]
		shadowTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		shadowTranslationXAnimation.timingFunctions = [easeOutTiming]
		shadowTranslationXAnimation.beginTime = beginTime
		shadowTranslationXAnimation.fillMode = fillMode
		shadowTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowTranslationXAnimation, forKey:"dash5_TranslationX")

		let shadowTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		shadowTranslationYAnimation.duration = 0.750
		shadowTranslationYAnimation.values = [9.000 as Float, 5.000 as Float]
		shadowTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		shadowTranslationYAnimation.timingFunctions = [linearTiming]
		shadowTranslationYAnimation.beginTime = beginTime
		shadowTranslationYAnimation.fillMode = fillMode
		shadowTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowTranslationYAnimation, forKey:"dash5_TranslationY")

		let arcRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		arcRotationAnimation.duration = 0.750
		arcRotationAnimation.values = [-0.524 as Float, -0.244 as Float]
		arcRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		arcRotationAnimation.timingFunctions = [easeOutTiming]
		arcRotationAnimation.beginTime = beginTime
		arcRotationAnimation.fillMode = fillMode
		arcRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["arc"]?.layer.addAnimation(arcRotationAnimation, forKey:"dash5_Rotation")

		let arcTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		arcTranslationXAnimation.duration = 0.750
		arcTranslationXAnimation.values = [4.000 as Float, -1.000 as Float]
		arcTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		arcTranslationXAnimation.timingFunctions = [linearTiming]
		arcTranslationXAnimation.beginTime = beginTime
		arcTranslationXAnimation.fillMode = fillMode
		arcTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["arc"]?.layer.addAnimation(arcTranslationXAnimation, forKey:"dash5_TranslationX")
	}

	func removeDash5Animation() {
		self.layer.removeAnimationForKey("Dash5")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("dash5_Rotation")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("dash5_TranslationX")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("dash5_TranslationY")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("dash5_Rotation")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("dash5_TranslationX")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("dash5_TranslationY")
		self.viewsByName["arc"]?.layer.removeAnimationForKey("dash5_Rotation")
		self.viewsByName["arc"]?.layer.removeAnimationForKey("dash5_TranslationX")
	}

	// - MARK: dash6

	func addDash6Animation() {
		addDash6AnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addDash6Animation(completion: ((Bool) -> Void)?) {
		addDash6AnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addDash6Animation(removedOnCompletion removedOnCompletion: Bool) {
		addDash6AnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addDash6Animation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addDash6AnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addDash6AnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let easeOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.750
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Dash6")
			self.animationCompletions[layer.animationForKey("Dash6")!] = complete
		}

		let needleRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		needleRotationAnimation.duration = 0.750
		needleRotationAnimation.values = [0.524 as Float, 0.785 as Float]
		needleRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		needleRotationAnimation.timingFunctions = [easeOutTiming]
		needleRotationAnimation.beginTime = beginTime
		needleRotationAnimation.fillMode = fillMode
		needleRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleRotationAnimation, forKey:"dash6_Rotation")

		let needleTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		needleTranslationXAnimation.duration = 0.750
		needleTranslationXAnimation.values = [7.000 as Float, 21.000 as Float]
		needleTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		needleTranslationXAnimation.timingFunctions = [easeOutTiming]
		needleTranslationXAnimation.beginTime = beginTime
		needleTranslationXAnimation.fillMode = fillMode
		needleTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleTranslationXAnimation, forKey:"dash6_TranslationX")

		let needleTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		needleTranslationYAnimation.duration = 0.750
		needleTranslationYAnimation.values = [-12.000 as Float, -20.000 as Float]
		needleTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		needleTranslationYAnimation.timingFunctions = [easeOutTiming]
		needleTranslationYAnimation.beginTime = beginTime
		needleTranslationYAnimation.fillMode = fillMode
		needleTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleTranslationYAnimation, forKey:"dash6_TranslationY")

		let shadowRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		shadowRotationAnimation.duration = 0.750
		shadowRotationAnimation.values = [0.436 as Float, 0.593 as Float]
		shadowRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		shadowRotationAnimation.timingFunctions = [easeOutTiming]
		shadowRotationAnimation.beginTime = beginTime
		shadowRotationAnimation.fillMode = fillMode
		shadowRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowRotationAnimation, forKey:"dash6_Rotation")

		let shadowTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		shadowTranslationXAnimation.duration = 0.750
		shadowTranslationXAnimation.values = [40.000 as Float, 79.055 as Float]
		shadowTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		shadowTranslationXAnimation.timingFunctions = [easeOutTiming]
		shadowTranslationXAnimation.beginTime = beginTime
		shadowTranslationXAnimation.fillMode = fillMode
		shadowTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowTranslationXAnimation, forKey:"dash6_TranslationX")

		let shadowTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		shadowTranslationYAnimation.duration = 0.750
		shadowTranslationYAnimation.values = [6.000 as Float, 30.355 as Float]
		shadowTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		shadowTranslationYAnimation.timingFunctions = [linearTiming]
		shadowTranslationYAnimation.beginTime = beginTime
		shadowTranslationYAnimation.fillMode = fillMode
		shadowTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowTranslationYAnimation, forKey:"dash6_TranslationY")

		let arcRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		arcRotationAnimation.duration = 0.750
		arcRotationAnimation.values = [-0.244 as Float, 0.000 as Float]
		arcRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		arcRotationAnimation.timingFunctions = [easeOutTiming]
		arcRotationAnimation.beginTime = beginTime
		arcRotationAnimation.fillMode = fillMode
		arcRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["arc"]?.layer.addAnimation(arcRotationAnimation, forKey:"dash6_Rotation")

		let arcTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		arcTranslationXAnimation.duration = 0.750
		arcTranslationXAnimation.values = [-1.000 as Float, 0.000 as Float]
		arcTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		arcTranslationXAnimation.timingFunctions = [linearTiming]
		arcTranslationXAnimation.beginTime = beginTime
		arcTranslationXAnimation.fillMode = fillMode
		arcTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["arc"]?.layer.addAnimation(arcTranslationXAnimation, forKey:"dash6_TranslationX")
	}

	func removeDash6Animation() {
		self.layer.removeAnimationForKey("Dash6")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("dash6_Rotation")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("dash6_TranslationX")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("dash6_TranslationY")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("dash6_Rotation")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("dash6_TranslationX")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("dash6_TranslationY")
		self.viewsByName["arc"]?.layer.removeAnimationForKey("dash6_Rotation")
		self.viewsByName["arc"]?.layer.removeAnimationForKey("dash6_TranslationX")
	}

	// - MARK: power-down

	func addPowerDownAnimation() {
		addPowerDownAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addPowerDownAnimation(completion: ((Bool) -> Void)?) {
		addPowerDownAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addPowerDownAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addPowerDownAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addPowerDownAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addPowerDownAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addPowerDownAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		let easeOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
		let easeInTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseIn)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.000
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "PowerDown")
			self.animationCompletions[layer.animationForKey("PowerDown")!] = complete
		}

		let needleRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		needleRotationAnimation.duration = 1.000
		needleRotationAnimation.values = [0.785 as Float, -0.768 as Float]
		needleRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		needleRotationAnimation.timingFunctions = [easeInOutTiming]
		needleRotationAnimation.beginTime = beginTime
		needleRotationAnimation.fillMode = fillMode
		needleRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleRotationAnimation, forKey:"power-down_Rotation")

		let needleTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		needleTranslationXAnimation.duration = 1.000
		needleTranslationXAnimation.values = [22.000 as Float, -28.000 as Float]
		needleTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		needleTranslationXAnimation.timingFunctions = [easeInOutTiming]
		needleTranslationXAnimation.beginTime = beginTime
		needleTranslationXAnimation.fillMode = fillMode
		needleTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleTranslationXAnimation, forKey:"power-down_TranslationX")

		let needleTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		needleTranslationYAnimation.duration = 1.000
		needleTranslationYAnimation.values = [-23.000 as Float, 8.000 as Float, -21.000 as Float]
		needleTranslationYAnimation.keyTimes = [0.000 as Float, 0.500 as Float, 1.000 as Float]
		needleTranslationYAnimation.timingFunctions = [easeInTiming, easeOutTiming]
		needleTranslationYAnimation.beginTime = beginTime
		needleTranslationYAnimation.fillMode = fillMode
		needleTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleTranslationYAnimation, forKey:"power-down_TranslationY")

		let shadowRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		shadowRotationAnimation.duration = 1.000
		shadowRotationAnimation.values = [0.593 as Float, 0.026 as Float, -0.576 as Float]
		shadowRotationAnimation.keyTimes = [0.000 as Float, 0.500 as Float, 1.000 as Float]
		shadowRotationAnimation.timingFunctions = [easeInTiming, easeOutTiming]
		shadowRotationAnimation.beginTime = beginTime
		shadowRotationAnimation.fillMode = fillMode
		shadowRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowRotationAnimation, forKey:"power-down_Rotation")

		let shadowTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		shadowTranslationXAnimation.duration = 1.000
		shadowTranslationXAnimation.values = [79.000 as Float, 77.193 as Float, 38.429 as Float, -6.500 as Float, -44.166 as Float, -74.042 as Float, -86.000 as Float]
		shadowTranslationXAnimation.keyTimes = [0.000 as Float, 0.300 as Float, 0.397 as Float, 0.500 as Float, 0.600 as Float, 0.700 as Float, 1.000 as Float]
		shadowTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, easeOutTiming]
		shadowTranslationXAnimation.beginTime = beginTime
		shadowTranslationXAnimation.fillMode = fillMode
		shadowTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowTranslationXAnimation, forKey:"power-down_TranslationX")

		let shadowTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		shadowTranslationYAnimation.duration = 1.000
		shadowTranslationYAnimation.values = [30.000 as Float, 23.559 as Float, -0.876 as Float, 2.000 as Float, -2.268 as Float, 5.354 as Float, 12.000 as Float]
		shadowTranslationYAnimation.keyTimes = [0.000 as Float, 0.300 as Float, 0.397 as Float, 0.500 as Float, 0.600 as Float, 0.700 as Float, 1.000 as Float]
		shadowTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, easeOutTiming]
		shadowTranslationYAnimation.beginTime = beginTime
		shadowTranslationYAnimation.fillMode = fillMode
		shadowTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowTranslationYAnimation, forKey:"power-down_TranslationY")

		let arcRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		arcRotationAnimation.duration = 1.000
		arcRotationAnimation.values = [0.000 as Float, -1.588 as Float]
		arcRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		arcRotationAnimation.timingFunctions = [easeInOutTiming]
		arcRotationAnimation.beginTime = beginTime
		arcRotationAnimation.fillMode = fillMode
		arcRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["arc"]?.layer.addAnimation(arcRotationAnimation, forKey:"power-down_Rotation")
	}

	func removePowerDownAnimation() {
		self.layer.removeAnimationForKey("PowerDown")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("power-down_Rotation")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("power-down_TranslationX")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("power-down_TranslationY")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("power-down_Rotation")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("power-down_TranslationX")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("power-down_TranslationY")
		self.viewsByName["arc"]?.layer.removeAnimationForKey("power-down_Rotation")
	}

	// - MARK: power-up

	func addPowerUpAnimation() {
		addPowerUpAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addPowerUpAnimation(completion: ((Bool) -> Void)?) {
		addPowerUpAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addPowerUpAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addPowerUpAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addPowerUpAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addPowerUpAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addPowerUpAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		let easeOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
		let easeInTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseIn)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.000
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "PowerUp")
			self.animationCompletions[layer.animationForKey("PowerUp")!] = complete
		}

		let needleRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		needleRotationAnimation.duration = 1.000
		needleRotationAnimation.values = [-0.768 as Float, 0.000 as Float, 0.785 as Float, 0.663 as Float, 0.785 as Float, 0.733 as Float, 0.785 as Float]
		needleRotationAnimation.keyTimes = [0.000 as Float, 0.250 as Float, 0.500 as Float, 0.625 as Float, 0.750 as Float, 0.875 as Float, 1.000 as Float]
		needleRotationAnimation.timingFunctions = [easeInTiming, easeOutTiming, linearTiming, easeInTiming, linearTiming, easeInTiming]
		needleRotationAnimation.beginTime = beginTime
		needleRotationAnimation.fillMode = fillMode
		needleRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleRotationAnimation, forKey:"power-up_Rotation")

		let needleTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		needleTranslationXAnimation.duration = 1.000
		needleTranslationXAnimation.values = [-29.000 as Float, 2.044 as Float, 22.000 as Float, 18.000 as Float, 22.000 as Float, 20.000 as Float, 22.000 as Float]
		needleTranslationXAnimation.keyTimes = [0.000 as Float, 0.250 as Float, 0.500 as Float, 0.625 as Float, 0.750 as Float, 0.875 as Float, 1.000 as Float]
		needleTranslationXAnimation.timingFunctions = [easeInTiming, easeOutTiming, linearTiming, easeInTiming, linearTiming, easeInTiming]
		needleTranslationXAnimation.beginTime = beginTime
		needleTranslationXAnimation.fillMode = fillMode
		needleTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleTranslationXAnimation, forKey:"power-up_TranslationX")

		let needleTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		needleTranslationYAnimation.duration = 1.000
		needleTranslationYAnimation.values = [-20.000 as Float, 3.391 as Float, -23.000 as Float, -18.000 as Float, -23.000 as Float, -21.000 as Float, -23.000 as Float]
		needleTranslationYAnimation.keyTimes = [0.000 as Float, 0.250 as Float, 0.500 as Float, 0.625 as Float, 0.750 as Float, 0.875 as Float, 1.000 as Float]
		needleTranslationYAnimation.timingFunctions = [easeInTiming, easeOutTiming, linearTiming, easeInTiming, linearTiming, easeInTiming]
		needleTranslationYAnimation.beginTime = beginTime
		needleTranslationYAnimation.fillMode = fillMode
		needleTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleTranslationYAnimation, forKey:"power-up_TranslationY")

		let shadowRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		shadowRotationAnimation.duration = 1.000
		shadowRotationAnimation.values = [-0.576 as Float, 0.000 as Float, 0.593 as Float, 0.524 as Float, 0.593 as Float, 0.559 as Float, 0.593 as Float]
		shadowRotationAnimation.keyTimes = [0.000 as Float, 0.250 as Float, 0.500 as Float, 0.625 as Float, 0.750 as Float, 0.875 as Float, 1.000 as Float]
		shadowRotationAnimation.timingFunctions = [easeInTiming, easeOutTiming, linearTiming, easeInTiming, linearTiming, easeInTiming]
		shadowRotationAnimation.beginTime = beginTime
		shadowRotationAnimation.fillMode = fillMode
		shadowRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowRotationAnimation, forKey:"power-up_Rotation")

		let shadowTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		shadowTranslationXAnimation.duration = 1.000
		shadowTranslationXAnimation.values = [-86.000 as Float, 9.009 as Float, 79.000 as Float, 65.000 as Float, 79.000 as Float, 75.000 as Float, 79.000 as Float]
		shadowTranslationXAnimation.keyTimes = [0.000 as Float, 0.250 as Float, 0.500 as Float, 0.625 as Float, 0.750 as Float, 0.875 as Float, 1.000 as Float]
		shadowTranslationXAnimation.timingFunctions = [easeInTiming, easeOutTiming, linearTiming, easeInTiming, linearTiming, linearTiming]
		shadowTranslationXAnimation.beginTime = beginTime
		shadowTranslationXAnimation.fillMode = fillMode
		shadowTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowTranslationXAnimation, forKey:"power-up_TranslationX")

		let shadowTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		shadowTranslationYAnimation.duration = 1.000
		shadowTranslationYAnimation.values = [12.000 as Float, -1.791 as Float, 30.000 as Float, 17.000 as Float, 30.000 as Float, 24.000 as Float, 30.000 as Float]
		shadowTranslationYAnimation.keyTimes = [0.000 as Float, 0.250 as Float, 0.500 as Float, 0.625 as Float, 0.750 as Float, 0.875 as Float, 1.000 as Float]
		shadowTranslationYAnimation.timingFunctions = [easeInTiming, easeOutTiming, linearTiming, easeInTiming, linearTiming, easeInTiming]
		shadowTranslationYAnimation.beginTime = beginTime
		shadowTranslationYAnimation.fillMode = fillMode
		shadowTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowTranslationYAnimation, forKey:"power-up_TranslationY")

		let arcRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		arcRotationAnimation.duration = 1.000
		arcRotationAnimation.values = [-1.588 as Float, 0.000 as Float, -0.113 as Float, 0.000 as Float, -0.052 as Float, 0.000 as Float]
		arcRotationAnimation.keyTimes = [0.000 as Float, 0.500 as Float, 0.625 as Float, 0.750 as Float, 0.875 as Float, 1.000 as Float]
		arcRotationAnimation.timingFunctions = [easeInOutTiming, linearTiming, easeInTiming, linearTiming, easeInTiming]
		arcRotationAnimation.beginTime = beginTime
		arcRotationAnimation.fillMode = fillMode
		arcRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["arc"]?.layer.addAnimation(arcRotationAnimation, forKey:"power-up_Rotation")
	}

	func removePowerUpAnimation() {
		self.layer.removeAnimationForKey("PowerUp")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("power-up_Rotation")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("power-up_TranslationX")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("power-up_TranslationY")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("power-up_Rotation")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("power-up_TranslationX")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("power-up_TranslationY")
		self.viewsByName["arc"]?.layer.removeAnimationForKey("power-up_Rotation")
	}

	// - MARK: start

	func addStartAnimation() {
		addStartAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addStartAnimation(completion: ((Bool) -> Void)?) {
		addStartAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addStartAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addStartAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addStartAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addStartAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addStartAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.000
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Start")
			self.animationCompletions[layer.animationForKey("Start")!] = complete
		}

		let needleRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		needleRotationAnimation.duration = 0.000
		needleRotationAnimation.values = [-0.772 as Float]
		needleRotationAnimation.keyTimes = [0.000 as Float]
		needleRotationAnimation.beginTime = beginTime
		needleRotationAnimation.fillMode = fillMode
		needleRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleRotationAnimation, forKey:"start_Rotation")

		let needleTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		needleTranslationXAnimation.duration = 0.000
		needleTranslationXAnimation.values = [-28.000 as Float]
		needleTranslationXAnimation.keyTimes = [0.000 as Float]
		needleTranslationXAnimation.beginTime = beginTime
		needleTranslationXAnimation.fillMode = fillMode
		needleTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleTranslationXAnimation, forKey:"start_TranslationX")

		let needleTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		needleTranslationYAnimation.duration = 0.000
		needleTranslationYAnimation.values = [-21.000 as Float]
		needleTranslationYAnimation.keyTimes = [0.000 as Float]
		needleTranslationYAnimation.beginTime = beginTime
		needleTranslationYAnimation.fillMode = fillMode
		needleTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["needle"]?.layer.addAnimation(needleTranslationYAnimation, forKey:"start_TranslationY")

		let shadowRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		shadowRotationAnimation.duration = 0.000
		shadowRotationAnimation.values = [-0.571 as Float]
		shadowRotationAnimation.keyTimes = [0.000 as Float]
		shadowRotationAnimation.beginTime = beginTime
		shadowRotationAnimation.fillMode = fillMode
		shadowRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowRotationAnimation, forKey:"start_Rotation")

		let shadowTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		shadowTranslationXAnimation.duration = 0.000
		shadowTranslationXAnimation.values = [-88.070 as Float]
		shadowTranslationXAnimation.keyTimes = [0.000 as Float]
		shadowTranslationXAnimation.beginTime = beginTime
		shadowTranslationXAnimation.fillMode = fillMode
		shadowTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowTranslationXAnimation, forKey:"start_TranslationX")

		let shadowTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		shadowTranslationYAnimation.duration = 0.000
		shadowTranslationYAnimation.values = [12.562 as Float]
		shadowTranslationYAnimation.keyTimes = [0.000 as Float]
		shadowTranslationYAnimation.beginTime = beginTime
		shadowTranslationYAnimation.fillMode = fillMode
		shadowTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shadow"]?.layer.addAnimation(shadowTranslationYAnimation, forKey:"start_TranslationY")

		let arcRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		arcRotationAnimation.duration = 0.000
		arcRotationAnimation.values = [-1.588 as Float]
		arcRotationAnimation.keyTimes = [0.000 as Float]
		arcRotationAnimation.beginTime = beginTime
		arcRotationAnimation.fillMode = fillMode
		arcRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["arc"]?.layer.addAnimation(arcRotationAnimation, forKey:"start_Rotation")
	}

	func removeStartAnimation() {
		self.layer.removeAnimationForKey("Start")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("start_Rotation")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("start_TranslationX")
		self.viewsByName["needle"]?.layer.removeAnimationForKey("start_TranslationY")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("start_Rotation")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("start_TranslationX")
		self.viewsByName["shadow"]?.layer.removeAnimationForKey("start_TranslationY")
		self.viewsByName["arc"]?.layer.removeAnimationForKey("start_Rotation")
	}

	override func animationDidStop(anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValueForKey(anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimationForKey("PowerUp")
		self.layer.removeAnimationForKey("Dash2")
		self.layer.removeAnimationForKey("Dash4")
		self.layer.removeAnimationForKey("PowerDown")
		self.layer.removeAnimationForKey("Dash6")
		self.layer.removeAnimationForKey("Start")
		self.layer.removeAnimationForKey("Dash1")
		self.layer.removeAnimationForKey("Dash3")
		self.layer.removeAnimationForKey("Dash5")
	}
}