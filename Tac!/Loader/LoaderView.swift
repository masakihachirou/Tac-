//
// LoaderView.swift
// Generated by Core Animator version 1.2.3 on 10/9/15.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

@IBDesignable
class LoaderView : UIView {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 375, height: 375))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .ScaleToFill:
				break
			case .ScaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
			scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = NSBundle(forClass:self.dynamicType)
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:375, height:375)
		__scaling__.center = CGPoint(x:187.5, y:187.5)
		__scaling__.layer.masksToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let loaderScreen06Copy = UIImageView()
		loaderScreen06Copy.bounds = CGRect(x:0, y:0, width:376.0, height:376.0)
		var imgLoaderScreen06Copy: UIImage!
		if let imagePath = bundle.pathForResource("loader_Screen_06 copy.png", ofType:nil) {
			imgLoaderScreen06Copy = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'loader_Screen_06 copy.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		loaderScreen06Copy.image = imgLoaderScreen06Copy
		loaderScreen06Copy.contentMode = .Center;
		loaderScreen06Copy.layer.position = CGPoint(x:188.000, y:188.000)
		__scaling__.addSubview(loaderScreen06Copy)
		viewsByName["loader_Screen_06 copy"] = loaderScreen06Copy

		let loadingX812 = UIImageView()
		loadingX812.bounds = CGRect(x:0, y:0, width:141.0, height:141.0)
		var imgLoadingX81: UIImage!
		if let imagePath = bundle.pathForResource("loading-x-81.png", ofType:nil) {
			imgLoadingX81 = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'loading-x-81.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		loadingX812.image = imgLoadingX81
		loadingX812.contentMode = .Center;
		loadingX812.layer.position = CGPoint(x:187.500, y:187.500)
		__scaling__.addSubview(loadingX812)
		viewsByName["loading-x-81 2"] = loadingX812

		self.viewsByName = viewsByName
	}

	// - MARK: startLoader

	func addStartLoaderAnimation() {
		addStartLoaderAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addStartLoaderAnimation(completion: ((Bool) -> Void)?) {
		addStartLoaderAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addStartLoaderAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addStartLoaderAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addStartLoaderAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addStartLoaderAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addStartLoaderAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let easeInTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseIn)
		let easeOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 2.800
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "StartLoader")
			self.animationCompletions[layer.animationForKey("StartLoader")!] = complete
		}

		let loadingX812RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		loadingX812RotationAnimation.duration = 2.800
		loadingX812RotationAnimation.values = [0.000 as Float, 0.000 as Float, 0.785 as Float, 1.047 as Float, 0.785 as Float, 0.785 as Float, 1.571 as Float, 1.833 as Float, 1.571 as Float, 1.571 as Float, 2.356 as Float, 2.618 as Float, 2.356 as Float, 2.356 as Float, 3.142 as Float, 3.403 as Float, 3.142 as Float]
		loadingX812RotationAnimation.keyTimes = [0.000 as Float, 0.179 as Float, 0.214 as Float, 0.232 as Float, 0.250 as Float, 0.429 as Float, 0.464 as Float, 0.482 as Float, 0.500 as Float, 0.679 as Float, 0.714 as Float, 0.732 as Float, 0.750 as Float, 0.929 as Float, 0.964 as Float, 0.982 as Float, 1.000 as Float]
		loadingX812RotationAnimation.timingFunctions = [linearTiming, easeInTiming, easeOutTiming, linearTiming, linearTiming, easeInTiming, easeOutTiming, linearTiming, linearTiming, easeInTiming, easeOutTiming, linearTiming, linearTiming, easeInTiming, easeOutTiming, linearTiming]
		loadingX812RotationAnimation.beginTime = beginTime
		loadingX812RotationAnimation.fillMode = fillMode
		loadingX812RotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["loading-x-81 2"]?.layer.addAnimation(loadingX812RotationAnimation, forKey:"startLoader_Rotation")
	}

	func removeStartLoaderAnimation() {
		self.layer.removeAnimationForKey("StartLoader")
		self.viewsByName["loading-x-81 2"]?.layer.removeAnimationForKey("startLoader_Rotation")
	}

	override func animationDidStop(anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValueForKey(anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimationForKey("StartLoader")
	}
}